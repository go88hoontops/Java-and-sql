* 예외 처리

    예외: 프로그램이 실행되는 동안에 발생하는 예기치 
            않은 에러를 의미 (비 정상적인 종료를 막기 위해서 사용)

1. 
   try{
	예외가 발생할 가능성이 있는 문장;
   }catch(예외클래스명  매개변수){
	예외 메시지;
   }

2. 
   try{
	예외가 발생할 가능성이 있는 문장;
   }catch(예외클래스명 매개변수){
	예외 메시지;
   }catch(예외클래스명 매개변수){
	예외 메시지;
   }

3. 
   try{
	예외가 발생할 가능성이 있는 문장;
   }catch(예외클래스명 매개변수){
	예외 메시지;
   }finally{
	//주로 파일을 닫을때, 데이터베이스 연결 끊을때 사용됨
               예외가 발생하든, 발생하지 않든 무조건 실행됨;
   }

4.  class Test{
       public void check() throws Exception{

       }
       public static void main(String[] args){
	  try{        
		Test t = new Test();
        		t.check();
	  }catch(Exception e){
	  }
       }
    }

5. class Test{
    public void check() throws ArrayIndexOutOfBoundsException {
       
		for( int i=0 ; i<10 ; i++ ) {
		  // 예외를 던짐(프로그래머가 예외를 발생시킴)
			if( i == 3 ){ 
			  throw new ArrayIndexOutOfBoundsException();
			}			
		}
    }	
    public static void main( String[] args ) {
		Test t = new Test();	
	try {
	    t.check();
	} catch ( ArrayIndexOutOfBoundsException ab ) {	    
	    ab.printStackTrace();
	}
   }


* 예외 클래스

ArithmeticException : 0으로 나눌때

ArrayIndexOutOfBoundsException : 배열의 범위를 벗어났을때

NumberFormatException : 숫자외의 값을 사용할때

NullPointerException : 객체를 생성하지 않고 멤버변수나 
		    메소드를 호출할때

IOException : 입출력에 관련된 예외

FileNotFoundException : 파일이 없을때 발생

SQLException : 데이터베이스 관련 예외



  
   